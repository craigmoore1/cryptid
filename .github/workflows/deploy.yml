name: deploy program devnet
on:
  workflow_run:
    workflows:
      - build
    branches:
      - anchor_rewrite
    types:
      - completed

env:
  solana_version: stable
  CRYPTID_PROGRAM_ID: cryptJTh61jY5kbUmBEXyc86tBUyueBDrLuNSZWmUcs
  MIDDLEWARE_CHECK_RECIPIENT: midcHDoZsxvMmNtUr8howe8MWFrJeHHPbAyJF1nHvyf
  MIDDLEWARE_CHECK_PASS: midpT1DeQGnKUjmGbEtUMyugXL5oEBeXU3myBMntkKo
  MIDDLEWARE_TIME_DELAY: midttN2h6G2CBvt1kpnwUsFXM6Gv7gratVwuo2XhSNk
  SOLANA_AUTHORITY: ${{ secrets.SOLANA_PROGRAM_AUTHORITY }}

jobs:
  install:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        name: cache solana cli
        id: cache-solana
        with:
          path: |
            ~/.cache/solana/
            ~/.local/share/solana/
          key: solana-${{ runner.os }}-v0000-${{ env.solana_version }}

      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache node dependencies
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: install node_modules
        run: |
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          yarn --frozen-lockfile

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache rust
        uses: Swatinem/rust-cache@v1

      - name: install essentials
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: install solana
        if: steps.cache-solana.outputs.cache-hit != 'true'
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/${{ env.solana_version }}/install)"
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

  program-dev-deploy:
    name: Deploy dev cryptid on-chain program, built on Solana ${{ matrix.solana }}, Rust ${{ matrix.rust }}, and ${{ matrix.os }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: [install]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: ['1.63']
        solana: ['stable']
        os: [ubuntu-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Use Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Build programs
        uses: actions-rs/cargo@v1
        with:
          command: yarn anchor build -v

      - name: Deploy programs
        run: |
          echo "$SOLANA_AUTHORITY" > ~/.config/solana/id.json
          anchor upgrade target/verifiable/cryptid.so --program-id CRYPTID_PROGRAM_ID --provider.cluster devnet --provider.wallet ~/.config/solana/id.json
          anchor upgrade target/verifiable/check_recipient.so --program-id MIDDLEWARE_CHECK_RECIPIENT --provider.cluster devnet --provider.wallet ~/.config/solana/id.json
          anchor upgrade target/verifiable/check_pass.so --program-id MIDDLEWARE_CHECK_PASS --provider.cluster devnet --provider.wallet ~/.config/solana/id.json
          anchor upgrade target/verifiable/time_delay.so --program-id MIDDLEWARE_TIME_DELAY --provider.cluster devnet --provider.wallet ~/.config/solana/id.json
